From f2187582fbc3638718bac57445ad59ca8099b826 Mon Sep 17 00:00:00 2001
From: Karsten Blees <blees@dcon.de>
Date: Wed, 15 Apr 2015 21:05:42 +0200
Subject: [PATCH 24/N] Pass the TZ variable to non-msys programs if it is
 standard-compliant

Native Windows programs (linked to MSVCRT) understand a subset of the TZ
environment variable syntax [1], namely "std offset dst" (e.g."CET-1CEST"
for central european time, see _tzset() MSDN documentation [2]).

Implementation-defined forms (starting with ':') and rules when to switch
to DST are not supported by MSVCRT.

MSYS2 uses a non-standard TZ format (e.g. "TZ=Europe/Berlin", without ':').

When preparing the environment for non-msys programs, pass the TZ variable
on if it looks standard-compliant (as recognized by MSVCRT). Otherwise
drop the variable and let MSVCRT determine system timezone settings via
native Windows APIs.

This allows us to use standard-compliant TZ settings that also affect
non-msys programs, as needed e.g. by the git test suite.

[1] http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap08.html
[2] https://msdn.microsoft.com/library/90s5c885.aspx

Signed-off-by: Karsten Blees <blees@dcon.de>
---
 winsup/cygwin/environ.cc | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/winsup/cygwin/environ.cc b/winsup/cygwin/environ.cc
index 015711f..b98f77d 100644
--- a/winsup/cygwin/environ.cc
+++ b/winsup/cygwin/environ.cc
@@ -1146,7 +1146,15 @@ build_env (const char * const *envp, PWCHAR &envblock, int &envc,
       {
 	/* Don't pass timezone environment to non-msys applications */
 	if (ascii_strncasematch(*srcp, "TZ=", 3))
-	  goto next1;
+          {
+	    const char *v = *srcp + 3;
+	    if (*v == ':')
+	      goto next1;
+	    for (; *v; v++)
+	      if (!isalpha(*v) && !isdigit(*v) &&
+		  *v != '-' && *v != '+' && *v != ':')
+	        goto next1;
+	  }
 	else if (ascii_strncasematch(*srcp, "MSYS2_ENV_CONV_EXCL=", 20))
 	  {
 	    msys2_env_conv_excl_env = (char*)alloca (strlen(&(*srcp)[20])+1);
-- 
2.9.0

